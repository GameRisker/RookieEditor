<?xml version="1.0" encoding="utf-8"?>
<s:Window xmlns:fx="http://ns.adobe.com/mxml/2009" 
		  xmlns:s="library://ns.adobe.com/flex/spark" 
		  xmlns:mx="library://ns.adobe.com/flex/mx" width="500" height="300" xmlns:ns="http://flex.apache.org/experimental/ns"
		  showStatusBar="false" resizable="false" 
		  mouseDown="{this.nativeWindow.startMove()}" 
		  backgroundColor="0x000000"
		  addedToStage="Init()" xmlns:manager="com.gamerisker.manager.*">
	<fx:Script>
		<![CDATA[
			import air.update.ApplicationUpdaterUI;
			import air.update.events.DownloadErrorEvent;
			import air.update.events.StatusUpdateErrorEvent;
			import air.update.events.UpdateEvent;
			
			import com.gamerisker.core.Define;
			import com.gamerisker.manager.ControlManager;
			import com.gamerisker.manager.KeyboardManager;
			import com.gamerisker.manager.LoadManager;
			import com.gamerisker.manager.MouseManager;
			import com.gamerisker.manager.MultipleManager;
			import com.gamerisker.manager.PngManager;
			import com.gamerisker.manager.RemoteConfig;
			import com.gamerisker.manager.SceneSourceManager;
			import com.gamerisker.manager.SharedManager;
			import com.gamerisker.manager.SkinManager;
			import com.gamerisker.manager.TexturesManager;
			
			import flash.net.navigateToURL;
			import flash.utils.clearTimeout;
			import flash.utils.setTimeout;
			
			import mx.events.CloseEvent;
			
			import spark.components.Alert;
			
			private var m_timeId : uint;
			private var m_time : uint = 200;
			
			private function Init() : void
			{
				if(SharedManager.getInstance().isNull())
				{
					RookieEditor.getInstante().System.setDefaultPath();
				}
				
				m_timeId = setTimeout(Start,m_time);
			}
			
			private function AlertClick(event : CloseEvent) : void
			{
				switch(event.detail)
				{
					case Alert.OK :
						navigateToURL(new URLRequest(Define.DOWNVERSION));
						setTimeout(ClickOk,500);
						break
					case Alert.CANCEL :
						Init();
						break
				}
			}
			
			private function ClickOk() : void
			{
				this.close();
				RookieEditor.getInstante().OnCloseWindow(null);
			}
			
			/**第一个*/
			private function Start() : void
			{
				clearTimeout(m_timeId);
				
				label.text = "加载场景纹理配置文件...";
				
				LoadManager.Init();
				LoadManager.Add(SharedManager.getInstance().getSceneUrl(),1,OnSceneSourceComplete);
				LoadManager.Start();
			}
			
			/**第二个*/
			private function OnSceneSourceComplete(value : String) : void
			{
				SceneSourceManager.Init(value);
				
				m_timeId = setTimeout(start,m_time);
				
				function start() : void
				{
					label.text = "加载场景纹理...";
					
					var sceneUrl : Object = SceneSourceManager.GetAllSourceInsUrl();
					
					for each(var items : Array in sceneUrl)
					{
						for each(var temp : Object in items)
						{
							LoadManager.Add(RemoteConfig.GetAtfRemoteURL(temp["url"]),temp["type"]);
						}
					}
					
					clearTimeout(m_timeId);
					LoadManager.Start(InitPngManager);
				}
			}
			
			public function OnTextureComplete(value : Object = null) : void
			{
				label.text = "初始化场景纹理...";
				
				var data : Object = SceneSourceManager.GetAllData();
				
				for(var name : String in data)
				{
					HandleSceneSource(name);
				}
			}
			
			private function HandleSceneSource(sceneName : String) : void
			{
				var allId : Array = SceneSourceManager.GetSceneSourceId(sceneName);
				var data : Array;
				var xml : XML;
				var byte : ByteArray;
				var name : String;
				
				for(var i:int=0;i<allId.length;i++)
				{
					name = allId[i];
					data = SceneSourceManager.GetSourceItem(sceneName,name);
					
					if(data[0]["type"] == 1)	//XML文件
					{
						xml = new XML(LoadManager.GetSource(RemoteConfig.GetAtfRemoteURL(data[0]["url"])));
					}
					else if(data[0]["type"] == 2)	//二进制文件
					{
						byte = LoadManager.GetSource(RemoteConfig.GetAtfRemoteURL(data[0]["url"])) as ByteArray;
					}
					
					if(data[1]["type"] == 1)
					{
						xml = new XML(LoadManager.GetSource(RemoteConfig.GetAtfRemoteURL(data[1]["url"])));
					}
					else if(data[1]["type"] == 2)
					{
						byte = LoadManager.GetSource(RemoteConfig.GetAtfRemoteURL(data[1]["url"])) as ByteArray;
					}
					
					TexturesManager.Add(name,xml,byte);
				}
				
			}
			
			/**第三个*/
			private function InitPngManager(value : Object = null) : void
			{
				m_timeId = setTimeout(start,m_time)
					
				function start() : void
				{
					clearTimeout(m_timeId);
					label.text = "图片纹理资源...";
					PngManager.Init(InitCompleteManager);
				}
			}
			
			private function InitCompleteManager() : void
			{
				InitSkinManager();
			}
			
			/**第四个*/
			private function InitSkinManager() : void
			{
				m_timeId = setTimeout(start,m_time)
					
				function start() : void
				{
					clearTimeout(m_timeId);
					label.text = "加载皮肤配置文件...";
					LoadManager.Add(SharedManager.getInstance().getSkinUrl(),1,OnCompleteSkinManager);
					LoadManager.Start();
				}
			}
			
			/**第五个*/
			private function OnCompleteSkinManager(value : String) : void
			{
				m_timeId = setTimeout(start,m_time)
					
				function start() : void
				{
					clearTimeout(m_timeId);
					label.text = "初始化皮肤配置...";
					SkinManager.Init(value);
					RookieEditor.getInstante().Start();
				}
			}
			
			private function OnCloseEvent() : void
			{
				this.close();
			}
		]]>
	</fx:Script>
	<fx:Declarations>
		<!-- 将非可视元素（例如服务、值对象）放在此处 -->
	</fx:Declarations>
	<s:Image x="0" y="0" width="100%" height="100%" source="@Embed(source='../../../ComponentIcon/Icon.png')"/>
	<s:Label id="label" x="200" y="230" text="开始加载..." color="0xFFFFFF"/>
</s:Window>
